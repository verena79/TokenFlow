{"version":3,"file":"workbox-background-sync.dev.js","sources":["../_version.js","../node_modules/idb/build/esm/wrap-idb-value.js","../node_modules/idb/build/esm/index.js","../lib/QueueDb.js","../lib/QueueStore.js","../lib/StorableRequest.js","../Queue.js","../BackgroundSyncPlugin.js"],"sourcesContent":["\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:background-sync:6.2.4'] && _();\n}\ncatch (e) { }\n","const instanceOfAny = (object, constructors) => constructors.some((c) => object instanceof c);\n\nlet idbProxyableTypes;\nlet cursorAdvanceMethods;\n// This is a function to prevent it throwing up in node environments.\nfunction getIdbProxyableTypes() {\n    return (idbProxyableTypes ||\n        (idbProxyableTypes = [\n            IDBDatabase,\n            IDBObjectStore,\n            IDBIndex,\n            IDBCursor,\n            IDBTransaction,\n        ]));\n}\n// This is a function to prevent it throwing up in node environments.\nfunction getCursorAdvanceMethods() {\n    return (cursorAdvanceMethods ||\n        (cursorAdvanceMethods = [\n            IDBCursor.prototype.advance,\n            IDBCursor.prototype.continue,\n            IDBCursor.prototype.continuePrimaryKey,\n        ]));\n}\nconst cursorRequestMap = new WeakMap();\nconst transactionDoneMap = new WeakMap();\nconst transactionStoreNamesMap = new WeakMap();\nconst transformCache = new WeakMap();\nconst reverseTransformCache = new WeakMap();\nfunction promisifyRequest(request) {\n    const promise = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            request.removeEventListener('success', success);\n            request.removeEventListener('error', error);\n        };\n        const success = () => {\n            resolve(wrap(request.result));\n            unlisten();\n        };\n        const error = () => {\n            reject(request.error);\n            unlisten();\n        };\n        request.addEventListener('success', success);\n        request.addEventListener('error', error);\n    });\n    promise\n        .then((value) => {\n        // Since cursoring reuses the IDBRequest (*sigh*), we cache it for later retrieval\n        // (see wrapFunction).\n        if (value instanceof IDBCursor) {\n            cursorRequestMap.set(value, request);\n        }\n        // Catching to avoid \"Uncaught Promise exceptions\"\n    })\n        .catch(() => { });\n    // This mapping exists in reverseTransformCache but doesn't doesn't exist in transformCache. This\n    // is because we create many promises from a single IDBRequest.\n    reverseTransformCache.set(promise, request);\n    return promise;\n}\nfunction cacheDonePromiseForTransaction(tx) {\n    // Early bail if we've already created a done promise for this transaction.\n    if (transactionDoneMap.has(tx))\n        return;\n    const done = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            tx.removeEventListener('complete', complete);\n            tx.removeEventListener('error', error);\n            tx.removeEventListener('abort', error);\n        };\n        const complete = () => {\n            resolve();\n            unlisten();\n        };\n        const error = () => {\n            reject(tx.error || new DOMException('AbortError', 'AbortError'));\n            unlisten();\n        };\n        tx.addEventListener('complete', complete);\n        tx.addEventListener('error', error);\n        tx.addEventListener('abort', error);\n    });\n    // Cache it for later retrieval.\n    transactionDoneMap.set(tx, done);\n}\nlet idbProxyTraps = {\n    get(target, prop, receiver) {\n        if (target instanceof IDBTransaction) {\n            // Special handling for transaction.done.\n            if (prop === 'done')\n                return transactionDoneMap.get(target);\n            // Polyfill for objectStoreNames because of Edge.\n            if (prop === 'objectStoreNames') {\n                return target.objectStoreNames || transactionStoreNamesMap.get(target);\n            }\n            // Make tx.store return the only store in the transaction, or undefined if there are many.\n            if (prop === 'store') {\n                return receiver.objectStoreNames[1]\n                    ? undefined\n                    : receiver.objectStore(receiver.objectStoreNames[0]);\n            }\n        }\n        // Else transform whatever we get back.\n        return wrap(target[prop]);\n    },\n    set(target, prop, value) {\n        target[prop] = value;\n        return true;\n    },\n    has(target, prop) {\n        if (target instanceof IDBTransaction &&\n            (prop === 'done' || prop === 'store')) {\n            return true;\n        }\n        return prop in target;\n    },\n};\nfunction replaceTraps(callback) {\n    idbProxyTraps = callback(idbProxyTraps);\n}\nfunction wrapFunction(func) {\n    // Due to expected object equality (which is enforced by the caching in `wrap`), we\n    // only create one new func per func.\n    // Edge doesn't support objectStoreNames (booo), so we polyfill it here.\n    if (func === IDBDatabase.prototype.transaction &&\n        !('objectStoreNames' in IDBTransaction.prototype)) {\n        return function (storeNames, ...args) {\n            const tx = func.call(unwrap(this), storeNames, ...args);\n            transactionStoreNamesMap.set(tx, storeNames.sort ? storeNames.sort() : [storeNames]);\n            return wrap(tx);\n        };\n    }\n    // Cursor methods are special, as the behaviour is a little more different to standard IDB. In\n    // IDB, you advance the cursor and wait for a new 'success' on the IDBRequest that gave you the\n    // cursor. It's kinda like a promise that can resolve with many values. That doesn't make sense\n    // with real promises, so each advance methods returns a new promise for the cursor object, or\n    // undefined if the end of the cursor has been reached.\n    if (getCursorAdvanceMethods().includes(func)) {\n        return function (...args) {\n            // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n            // the original object.\n            func.apply(unwrap(this), args);\n            return wrap(cursorRequestMap.get(this));\n        };\n    }\n    return function (...args) {\n        // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n        // the original object.\n        return wrap(func.apply(unwrap(this), args));\n    };\n}\nfunction transformCachableValue(value) {\n    if (typeof value === 'function')\n        return wrapFunction(value);\n    // This doesn't return, it just creates a 'done' promise for the transaction,\n    // which is later returned for transaction.done (see idbObjectHandler).\n    if (value instanceof IDBTransaction)\n        cacheDonePromiseForTransaction(value);\n    if (instanceOfAny(value, getIdbProxyableTypes()))\n        return new Proxy(value, idbProxyTraps);\n    // Return the same value back if we're not going to transform it.\n    return value;\n}\nfunction wrap(value) {\n    // We sometimes generate multiple promises from a single IDBRequest (eg when cursoring), because\n    // IDB is weird and a single IDBRequest can yield many responses, so these can't be cached.\n    if (value instanceof IDBRequest)\n        return promisifyRequest(value);\n    // If we've already transformed this value before, reuse the transformed value.\n    // This is faster, but it also provides object equality.\n    if (transformCache.has(value))\n        return transformCache.get(value);\n    const newValue = transformCachableValue(value);\n    // Not all types are transformed.\n    // These may be primitive types, so they can't be WeakMap keys.\n    if (newValue !== value) {\n        transformCache.set(value, newValue);\n        reverseTransformCache.set(newValue, value);\n    }\n    return newValue;\n}\nconst unwrap = (value) => reverseTransformCache.get(value);\n\nexport { reverseTransformCache as a, instanceOfAny as i, replaceTraps as r, unwrap as u, wrap as w };\n","import { w as wrap, r as replaceTraps } from './wrap-idb-value.js';\nexport { u as unwrap, w as wrap } from './wrap-idb-value.js';\n\n/**\n * Open a database.\n *\n * @param name Name of the database.\n * @param version Schema version.\n * @param callbacks Additional callbacks.\n */\nfunction openDB(name, version, { blocked, upgrade, blocking, terminated } = {}) {\n    const request = indexedDB.open(name, version);\n    const openPromise = wrap(request);\n    if (upgrade) {\n        request.addEventListener('upgradeneeded', (event) => {\n            upgrade(wrap(request.result), event.oldVersion, event.newVersion, wrap(request.transaction));\n        });\n    }\n    if (blocked)\n        request.addEventListener('blocked', () => blocked());\n    openPromise\n        .then((db) => {\n        if (terminated)\n            db.addEventListener('close', () => terminated());\n        if (blocking)\n            db.addEventListener('versionchange', () => blocking());\n    })\n        .catch(() => { });\n    return openPromise;\n}\n/**\n * Delete a database.\n *\n * @param name Name of the database.\n */\nfunction deleteDB(name, { blocked } = {}) {\n    const request = indexedDB.deleteDatabase(name);\n    if (blocked)\n        request.addEventListener('blocked', () => blocked());\n    return wrap(request).then(() => undefined);\n}\n\nconst readMethods = ['get', 'getKey', 'getAll', 'getAllKeys', 'count'];\nconst writeMethods = ['put', 'add', 'delete', 'clear'];\nconst cachedMethods = new Map();\nfunction getMethod(target, prop) {\n    if (!(target instanceof IDBDatabase &&\n        !(prop in target) &&\n        typeof prop === 'string')) {\n        return;\n    }\n    if (cachedMethods.get(prop))\n        return cachedMethods.get(prop);\n    const targetFuncName = prop.replace(/FromIndex$/, '');\n    const useIndex = prop !== targetFuncName;\n    const isWrite = writeMethods.includes(targetFuncName);\n    if (\n    // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.\n    !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) ||\n        !(isWrite || readMethods.includes(targetFuncName))) {\n        return;\n    }\n    const method = async function (storeName, ...args) {\n        // isWrite ? 'readwrite' : undefined gzipps better, but fails in Edge :(\n        const tx = this.transaction(storeName, isWrite ? 'readwrite' : 'readonly');\n        let target = tx.store;\n        if (useIndex)\n            target = target.index(args.shift());\n        // Must reject if op rejects.\n        // If it's a write operation, must reject if tx.done rejects.\n        // Must reject with op rejection first.\n        // Must resolve with op value.\n        // Must handle both promises (no unhandled rejections)\n        return (await Promise.all([\n            target[targetFuncName](...args),\n            isWrite && tx.done,\n        ]))[0];\n    };\n    cachedMethods.set(prop, method);\n    return method;\n}\nreplaceTraps((oldTraps) => ({\n    ...oldTraps,\n    get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),\n    has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop),\n}));\n\nexport { deleteDB, openDB };\n","/*\n  Copyright 2021 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { openDB } from 'idb';\nimport '../_version.js';\nconst DB_VERSION = 3;\nconst DB_NAME = 'workbox-background-sync';\nconst REQUEST_OBJECT_STORE_NAME = 'requests';\nconst QUEUE_NAME_INDEX = 'queueName';\n/**\n * A class to interact directly an IndexedDB created specifically to save and\n * retrieve QueueStoreEntries. This class encapsulates all the schema details\n * to store the representation of a Queue.\n *\n * @private\n */\nexport class QueueDb {\n    constructor() {\n        this._db = null;\n    }\n    /**\n     * Add QueueStoreEntry to underlying db.\n     *\n     * @param {UnidentifiedQueueStoreEntry} entry\n     */\n    async addEntry(entry) {\n        const db = await this.getDb();\n        const tx = db.transaction(REQUEST_OBJECT_STORE_NAME, 'readwrite', { durability: 'relaxed' });\n        await tx.store.add(entry);\n        await tx.done;\n    }\n    /**\n     * Returns the first entry id in the ObjectStore.\n     *\n     * @return {number | undefined}\n     */\n    async getFirstEntryId() {\n        const db = await this.getDb();\n        const cursor = await db.transaction(REQUEST_OBJECT_STORE_NAME).store.openCursor();\n        return cursor === null || cursor === void 0 ? void 0 : cursor.value.id;\n    }\n    /**\n     * Get all the entries filtered by index\n     *\n     * @param queueName\n     * @return {Promise<QueueStoreEntry[]>}\n     */\n    async getAllEntriesByQueueName(queueName) {\n        const db = await this.getDb();\n        const results = await db.getAllFromIndex(REQUEST_OBJECT_STORE_NAME, QUEUE_NAME_INDEX, IDBKeyRange.only(queueName));\n        return results ? results : new Array();\n    }\n    /**\n     * Deletes a single entry by id.\n     *\n     * @param {number} id the id of the entry to be deleted\n     */\n    async deleteEntry(id) {\n        const db = await this.getDb();\n        await db.delete(REQUEST_OBJECT_STORE_NAME, id);\n    }\n    /**\n     *\n     * @param queueName\n     * @returns {Promise<QueueStoreEntry | undefined>}\n     */\n    async getFirstEntryByQueueName(queueName) {\n        return await this.getEndEntryFromIndex(IDBKeyRange.only(queueName), 'next');\n    }\n    /**\n     *\n     * @param queueName\n     * @returns {Promise<QueueStoreEntry | undefined>}\n     */\n    async getLastEntryByQueueName(queueName) {\n        return await this.getEndEntryFromIndex(IDBKeyRange.only(queueName), 'prev');\n    }\n    /**\n     * Returns either the first or the last entries, depending on direction.\n     * Filtered by index.\n     *\n     * @param {IDBCursorDirection} direction\n     * @param {IDBKeyRange} query\n     * @return {Promise<QueueStoreEntry | undefined>}\n     * @private\n     */\n    async getEndEntryFromIndex(query, direction) {\n        const db = await this.getDb();\n        const cursor = await db.transaction(REQUEST_OBJECT_STORE_NAME)\n            .store.index(QUEUE_NAME_INDEX)\n            .openCursor(query, direction);\n        return cursor === null || cursor === void 0 ? void 0 : cursor.value;\n    }\n    /**\n     * Returns an open connection to the database.\n     *\n     * @private\n     */\n    async getDb() {\n        if (!this._db) {\n            this._db = await openDB(DB_NAME, DB_VERSION, {\n                upgrade: this._upgradeDb,\n            });\n        }\n        return this._db;\n    }\n    /**\n     * Upgrades QueueDB\n     *\n     * @param {IDBPDatabase<QueueDBSchema>} db\n     * @param {number} oldVersion\n     * @private\n     */\n    _upgradeDb(db, oldVersion) {\n        if (oldVersion > 0 && oldVersion < DB_VERSION) {\n            if (db.objectStoreNames.contains(REQUEST_OBJECT_STORE_NAME)) {\n                db.deleteObjectStore(REQUEST_OBJECT_STORE_NAME);\n            }\n        }\n        const objStore = db.createObjectStore(REQUEST_OBJECT_STORE_NAME, {\n            autoIncrement: true,\n            keyPath: 'id',\n        });\n        objStore.createIndex(QUEUE_NAME_INDEX, QUEUE_NAME_INDEX, { unique: false });\n    }\n}\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport '../_version.js';\nimport { QueueDb } from './QueueDb.js';\n/**\n * A class to manage storing requests from a Queue in IndexedDB,\n * indexed by their queue name for easier access.\n *\n * @private\n */\nexport class QueueStore {\n    /**\n     * Associates this instance with a Queue instance, so entries added can be\n     * identified by their queue name.\n     *\n     * @param {string} queueName\n     * @private\n     */\n    constructor(queueName) {\n        this._queueName = queueName;\n        this._queueDb = new QueueDb();\n    }\n    /**\n     * Append an entry last in the queue.\n     *\n     * @param {Object} entry\n     * @param {Object} entry.requestData\n     * @param {number} [entry.timestamp]\n     * @param {Object} [entry.metadata]\n     * @private\n     */\n    async pushEntry(entry) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(entry, 'object', {\n                moduleName: 'workbox-background-sync',\n                className: 'QueueStore',\n                funcName: 'pushEntry',\n                paramName: 'entry',\n            });\n            assert.isType(entry.requestData, 'object', {\n                moduleName: 'workbox-background-sync',\n                className: 'QueueStore',\n                funcName: 'pushEntry',\n                paramName: 'entry.requestData',\n            });\n        }\n        // Don't specify an ID since one is automatically generated.\n        delete entry.id;\n        entry.queueName = this._queueName;\n        await this._queueDb.addEntry(entry);\n    }\n    /**\n     * Prepend an entry first in the queue.\n     *\n     * @param {Object} entry\n     * @param {Object} entry.requestData\n     * @param {number} [entry.timestamp]\n     * @param {Object} [entry.metadata]\n     * @private\n     */\n    async unshiftEntry(entry) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(entry, 'object', {\n                moduleName: 'workbox-background-sync',\n                className: 'QueueStore',\n                funcName: 'unshiftEntry',\n                paramName: 'entry',\n            });\n            assert.isType(entry.requestData, 'object', {\n                moduleName: 'workbox-background-sync',\n                className: 'QueueStore',\n                funcName: 'unshiftEntry',\n                paramName: 'entry.requestData',\n            });\n        }\n        const firstId = await this._queueDb.getFirstEntryId();\n        if (firstId) {\n            // Pick an ID one less than the lowest ID in the object store.\n            entry.id = firstId - 1;\n        }\n        else {\n            // Otherwise let the auto-incrementor assign the ID.\n            delete entry.id;\n        }\n        entry.queueName = this._queueName;\n        await this._queueDb.addEntry(entry);\n    }\n    /**\n     * Removes and returns the last entry in the queue matching the `queueName`.\n     *\n     * @return {Promise<QueueStoreEntry|undefined>}\n     * @private\n     */\n    async popEntry() {\n        return this._removeEntry(await this._queueDb.getLastEntryByQueueName(this._queueName));\n    }\n    /**\n     * Removes and returns the first entry in the queue matching the `queueName`.\n     *\n     * @return {Promise<QueueStoreEntry|undefined>}\n     * @private\n     */\n    async shiftEntry() {\n        return this._removeEntry(await this._queueDb.getFirstEntryByQueueName(this._queueName));\n    }\n    /**\n     * Returns all entries in the store matching the `queueName`.\n     *\n     * @param {Object} options See {@link module:workbox-background-sync.Queue~getAll}\n     * @return {Promise<Array<Object>>}\n     * @private\n     */\n    async getAll() {\n        return await this._queueDb.getAllEntriesByQueueName(this._queueName);\n    }\n    /**\n     * Deletes the entry for the given ID.\n     *\n     * WARNING: this method does not ensure the deleted entry belongs to this\n     * queue (i.e. matches the `queueName`). But this limitation is acceptable\n     * as this class is not publicly exposed. An additional check would make\n     * this method slower than it needs to be.\n     *\n     * @private\n     * @param {number} id\n     */\n    async deleteEntry(id) {\n        await this._queueDb.deleteEntry(id);\n    }\n    /**\n     * Removes and returns the first or last entry in the queue (based on the\n     * `direction` argument) matching the `queueName`.\n     *\n     * @return {Promise<QueueStoreEntry|undefined>}\n     * @private\n     */\n    async _removeEntry(entry) {\n        if (entry) {\n            await this.deleteEntry(entry.id);\n        }\n        return entry;\n    }\n}\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport '../_version.js';\nconst serializableProperties = [\n    'method',\n    'referrer',\n    'referrerPolicy',\n    'mode',\n    'credentials',\n    'cache',\n    'redirect',\n    'integrity',\n    'keepalive',\n];\n/**\n * A class to make it easier to serialize and de-serialize requests so they\n * can be stored in IndexedDB.\n *\n * @private\n */\nclass StorableRequest {\n    /**\n     * Accepts an object of request data that can be used to construct a\n     * `Request` but can also be stored in IndexedDB.\n     *\n     * @param {Object} requestData An object of request data that includes the\n     *     `url` plus any relevant properties of\n     *     [requestInit]{@link https://fetch.spec.whatwg.org/#requestinit}.\n     * @private\n     */\n    constructor(requestData) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(requestData, 'object', {\n                moduleName: 'workbox-background-sync',\n                className: 'StorableRequest',\n                funcName: 'constructor',\n                paramName: 'requestData',\n            });\n            assert.isType(requestData.url, 'string', {\n                moduleName: 'workbox-background-sync',\n                className: 'StorableRequest',\n                funcName: 'constructor',\n                paramName: 'requestData.url',\n            });\n        }\n        // If the request's mode is `navigate`, convert it to `same-origin` since\n        // navigation requests can't be constructed via script.\n        if (requestData['mode'] === 'navigate') {\n            requestData['mode'] = 'same-origin';\n        }\n        this._requestData = requestData;\n    }\n    /**\n     * Converts a Request object to a plain object that can be structured\n     * cloned or JSON-stringified.\n     *\n     * @param {Request} request\n     * @return {Promise<StorableRequest>}\n     *\n     * @private\n     */\n    static async fromRequest(request) {\n        const requestData = {\n            url: request.url,\n            headers: {},\n        };\n        // Set the body if present.\n        if (request.method !== 'GET') {\n            // Use ArrayBuffer to support non-text request bodies.\n            // NOTE: we can't use Blobs becuse Safari doesn't support storing\n            // Blobs in IndexedDB in some cases:\n            // https://github.com/dfahlander/Dexie.js/issues/618#issuecomment-398348457\n            requestData.body = await request.clone().arrayBuffer();\n        }\n        // Convert the headers from an iterable to an object.\n        for (const [key, value] of request.headers.entries()) {\n            requestData.headers[key] = value;\n        }\n        // Add all other serializable request properties\n        for (const prop of serializableProperties) {\n            if (request[prop] !== undefined) {\n                requestData[prop] = request[prop];\n            }\n        }\n        return new StorableRequest(requestData);\n    }\n    /**\n     * Returns a deep clone of the instances `_requestData` object.\n     *\n     * @return {Object}\n     *\n     * @private\n     */\n    toObject() {\n        const requestData = Object.assign({}, this._requestData);\n        requestData.headers = Object.assign({}, this._requestData.headers);\n        if (requestData.body) {\n            requestData.body = requestData.body.slice(0);\n        }\n        return requestData;\n    }\n    /**\n     * Converts this instance to a Request.\n     *\n     * @return {Request}\n     *\n     * @private\n     */\n    toRequest() {\n        return new Request(this._requestData.url, this._requestData);\n    }\n    /**\n     * Creates and returns a deep clone of the instance.\n     *\n     * @return {StorableRequest}\n     *\n     * @private\n     */\n    clone() {\n        return new StorableRequest(this.toObject());\n    }\n}\nexport { StorableRequest };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { QueueStore } from './lib/QueueStore.js';\nimport { StorableRequest } from './lib/StorableRequest.js';\nimport './_version.js';\nconst TAG_PREFIX = 'workbox-background-sync';\nconst MAX_RETENTION_TIME = 60 * 24 * 7; // 7 days in minutes\nconst queueNames = new Set();\n/**\n * Converts a QueueStore entry into the format exposed by Queue. This entails\n * converting the request data into a real request and omitting the `id` and\n * `queueName` properties.\n *\n * @param {UnidentifiedQueueStoreEntry} queueStoreEntry\n * @return {Queue}\n * @private\n */\nconst convertEntry = (queueStoreEntry) => {\n    const queueEntry = {\n        request: new StorableRequest(queueStoreEntry.requestData).toRequest(),\n        timestamp: queueStoreEntry.timestamp,\n    };\n    if (queueStoreEntry.metadata) {\n        queueEntry.metadata = queueStoreEntry.metadata;\n    }\n    return queueEntry;\n};\n/**\n * A class to manage storing failed requests in IndexedDB and retrying them\n * later. All parts of the storing and replaying process are observable via\n * callbacks.\n *\n * @memberof module:workbox-background-sync\n */\nclass Queue {\n    /**\n     * Creates an instance of Queue with the given options\n     *\n     * @param {string} name The unique name for this queue. This name must be\n     *     unique as it's used to register sync events and store requests\n     *     in IndexedDB specific to this instance. An error will be thrown if\n     *     a duplicate name is detected.\n     * @param {Object} [options]\n     * @param {Function} [options.onSync] A function that gets invoked whenever\n     *     the 'sync' event fires. The function is invoked with an object\n     *     containing the `queue` property (referencing this instance), and you\n     *     can use the callback to customize the replay behavior of the queue.\n     *     When not set the `replayRequests()` method is called.\n     *     Note: if the replay fails after a sync event, make sure you throw an\n     *     error, so the browser knows to retry the sync event later.\n     * @param {number} [options.maxRetentionTime=7 days] The amount of time (in\n     *     minutes) a request may be retried. After this amount of time has\n     *     passed, the request will be deleted from the queue.\n     */\n    constructor(name, { onSync, maxRetentionTime } = {}) {\n        this._syncInProgress = false;\n        this._requestsAddedDuringSync = false;\n        // Ensure the store name is not already being used\n        if (queueNames.has(name)) {\n            throw new WorkboxError('duplicate-queue-name', { name });\n        }\n        else {\n            queueNames.add(name);\n        }\n        this._name = name;\n        this._onSync = onSync || this.replayRequests;\n        this._maxRetentionTime = maxRetentionTime || MAX_RETENTION_TIME;\n        this._queueStore = new QueueStore(this._name);\n        this._addSyncListener();\n    }\n    /**\n     * @return {string}\n     */\n    get name() {\n        return this._name;\n    }\n    /**\n     * Stores the passed request in IndexedDB (with its timestamp and any\n     * metadata) at the end of the queue.\n     *\n     * @param {QueueEntry} entry\n     * @param {Request} entry.request The request to store in the queue.\n     * @param {Object} [entry.metadata] Any metadata you want associated with the\n     *     stored request. When requests are replayed you'll have access to this\n     *     metadata object in case you need to modify the request beforehand.\n     * @param {number} [entry.timestamp] The timestamp (Epoch time in\n     *     milliseconds) when the request was first added to the queue. This is\n     *     used along with `maxRetentionTime` to remove outdated requests. In\n     *     general you don't need to set this value, as it's automatically set\n     *     for you (defaulting to `Date.now()`), but you can update it if you\n     *     don't want particular requests to expire.\n     */\n    async pushRequest(entry) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(entry, 'object', {\n                moduleName: 'workbox-background-sync',\n                className: 'Queue',\n                funcName: 'pushRequest',\n                paramName: 'entry',\n            });\n            assert.isInstance(entry.request, Request, {\n                moduleName: 'workbox-background-sync',\n                className: 'Queue',\n                funcName: 'pushRequest',\n                paramName: 'entry.request',\n            });\n        }\n        await this._addRequest(entry, 'push');\n    }\n    /**\n     * Stores the passed request in IndexedDB (with its timestamp and any\n     * metadata) at the beginning of the queue.\n     *\n     * @param {QueueEntry} entry\n     * @param {Request} entry.request The request to store in the queue.\n     * @param {Object} [entry.metadata] Any metadata you want associated with the\n     *     stored request. When requests are replayed you'll have access to this\n     *     metadata object in case you need to modify the request beforehand.\n     * @param {number} [entry.timestamp] The timestamp (Epoch time in\n     *     milliseconds) when the request was first added to the queue. This is\n     *     used along with `maxRetentionTime` to remove outdated requests. In\n     *     general you don't need to set this value, as it's automatically set\n     *     for you (defaulting to `Date.now()`), but you can update it if you\n     *     don't want particular requests to expire.\n     */\n    async unshiftRequest(entry) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(entry, 'object', {\n                moduleName: 'workbox-background-sync',\n                className: 'Queue',\n                funcName: 'unshiftRequest',\n                paramName: 'entry',\n            });\n            assert.isInstance(entry.request, Request, {\n                moduleName: 'workbox-background-sync',\n                className: 'Queue',\n                funcName: 'unshiftRequest',\n                paramName: 'entry.request',\n            });\n        }\n        await this._addRequest(entry, 'unshift');\n    }\n    /**\n     * Removes and returns the last request in the queue (along with its\n     * timestamp and any metadata). The returned object takes the form:\n     * `{request, timestamp, metadata}`.\n     *\n     * @return {Promise<QueueEntry | undefined>}\n     */\n    async popRequest() {\n        return this._removeRequest('pop');\n    }\n    /**\n     * Removes and returns the first request in the queue (along with its\n     * timestamp and any metadata). The returned object takes the form:\n     * `{request, timestamp, metadata}`.\n     *\n     * @return {Promise<QueueEntry | undefined>}\n     */\n    async shiftRequest() {\n        return this._removeRequest('shift');\n    }\n    /**\n     * Returns all the entries that have not expired (per `maxRetentionTime`).\n     * Any expired entries are removed from the queue.\n     *\n     * @return {Promise<Array<QueueEntry>>}\n     */\n    async getAll() {\n        const allEntries = await this._queueStore.getAll();\n        const now = Date.now();\n        const unexpiredEntries = [];\n        for (const entry of allEntries) {\n            // Ignore requests older than maxRetentionTime. Call this function\n            // recursively until an unexpired request is found.\n            const maxRetentionTimeInMs = this._maxRetentionTime * 60 * 1000;\n            if (now - entry.timestamp > maxRetentionTimeInMs) {\n                await this._queueStore.deleteEntry(entry.id);\n            }\n            else {\n                unexpiredEntries.push(convertEntry(entry));\n            }\n        }\n        return unexpiredEntries;\n    }\n    /**\n     * Adds the entry to the QueueStore and registers for a sync event.\n     *\n     * @param {Object} entry\n     * @param {Request} entry.request\n     * @param {Object} [entry.metadata]\n     * @param {number} [entry.timestamp=Date.now()]\n     * @param {string} operation ('push' or 'unshift')\n     * @private\n     */\n    async _addRequest({ request, metadata, timestamp = Date.now(), }, operation) {\n        const storableRequest = await StorableRequest.fromRequest(request.clone());\n        const entry = {\n            requestData: storableRequest.toObject(),\n            timestamp,\n        };\n        // Only include metadata if it's present.\n        if (metadata) {\n            entry.metadata = metadata;\n        }\n        await this._queueStore[`${operation}Entry`](entry);\n        if (process.env.NODE_ENV !== 'production') {\n            logger.log(`Request for '${getFriendlyURL(request.url)}' has ` +\n                `been added to background sync queue '${this._name}'.`);\n        }\n        // Don't register for a sync if we're in the middle of a sync. Instead,\n        // we wait until the sync is complete and call register if\n        // `this._requestsAddedDuringSync` is true.\n        if (this._syncInProgress) {\n            this._requestsAddedDuringSync = true;\n        }\n        else {\n            await this.registerSync();\n        }\n    }\n    /**\n     * Removes and returns the first or last (depending on `operation`) entry\n     * from the QueueStore that's not older than the `maxRetentionTime`.\n     *\n     * @param {string} operation ('pop' or 'shift')\n     * @return {Object|undefined}\n     * @private\n     */\n    async _removeRequest(operation) {\n        const now = Date.now();\n        const entry = await this._queueStore[`${operation}Entry`]();\n        if (entry) {\n            // Ignore requests older than maxRetentionTime. Call this function\n            // recursively until an unexpired request is found.\n            const maxRetentionTimeInMs = this._maxRetentionTime * 60 * 1000;\n            if (now - entry.timestamp > maxRetentionTimeInMs) {\n                return this._removeRequest(operation);\n            }\n            return convertEntry(entry);\n        }\n        else {\n            return undefined;\n        }\n    }\n    /**\n     * Loops through each request in the queue and attempts to re-fetch it.\n     * If any request fails to re-fetch, it's put back in the same position in\n     * the queue (which registers a retry for the next sync event).\n     */\n    async replayRequests() {\n        let entry;\n        while ((entry = await this.shiftRequest())) {\n            try {\n                await fetch(entry.request.clone());\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.log(`Request for '${getFriendlyURL(entry.request.url)}' ` +\n                        `has been replayed in queue '${this._name}'`);\n                }\n            }\n            catch (error) {\n                await this.unshiftRequest(entry);\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.log(`Request for '${getFriendlyURL(entry.request.url)}' ` +\n                        `failed to replay, putting it back in queue '${this._name}'`);\n                }\n                throw new WorkboxError('queue-replay-failed', { name: this._name });\n            }\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            logger.log(`All requests in queue '${this.name}' have successfully ` +\n                `replayed; the queue is now empty!`);\n        }\n    }\n    /**\n     * Registers a sync event with a tag unique to this instance.\n     */\n    async registerSync() {\n        if ('sync' in self.registration) {\n            try {\n                await self.registration.sync.register(`${TAG_PREFIX}:${this._name}`);\n            }\n            catch (err) {\n                // This means the registration failed for some reason, possibly due to\n                // the user disabling it.\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.warn(`Unable to register sync event for '${this._name}'.`, err);\n                }\n            }\n        }\n    }\n    /**\n     * In sync-supporting browsers, this adds a listener for the sync event.\n     * In non-sync-supporting browsers, this will retry the queue on service\n     * worker startup.\n     *\n     * @private\n     */\n    _addSyncListener() {\n        if ('sync' in self.registration) {\n            self.addEventListener('sync', (event) => {\n                if (event.tag === `${TAG_PREFIX}:${this._name}`) {\n                    if (process.env.NODE_ENV !== 'production') {\n                        logger.log(`Background sync for tag '${event.tag}' ` +\n                            `has been received`);\n                    }\n                    const syncComplete = async () => {\n                        this._syncInProgress = true;\n                        let syncError;\n                        try {\n                            await this._onSync({ queue: this });\n                        }\n                        catch (error) {\n                            if (error instanceof Error) {\n                                syncError = error;\n                                // Rethrow the error. Note: the logic in the finally clause\n                                // will run before this gets rethrown.\n                                throw syncError;\n                            }\n                        }\n                        finally {\n                            // New items may have been added to the queue during the sync,\n                            // so we need to register for a new sync if that's happened...\n                            // Unless there was an error during the sync, in which\n                            // case the browser will automatically retry later, as long\n                            // as `event.lastChance` is not true.\n                            if (this._requestsAddedDuringSync &&\n                                !(syncError && !event.lastChance)) {\n                                await this.registerSync();\n                            }\n                            this._syncInProgress = false;\n                            this._requestsAddedDuringSync = false;\n                        }\n                    };\n                    event.waitUntil(syncComplete());\n                }\n            });\n        }\n        else {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.log(`Background sync replaying without background sync event`);\n            }\n            // If the browser doesn't support background sync, retry\n            // every time the service worker starts up as a fallback.\n            void this._onSync({ queue: this });\n        }\n    }\n    /**\n     * Returns the set of queue names. This is primarily used to reset the list\n     * of queue names in tests.\n     *\n     * @return {Set<string>}\n     *\n     * @private\n     */\n    static get _queueNames() {\n        return queueNames;\n    }\n}\nexport { Queue };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { Queue } from './Queue.js';\nimport './_version.js';\n/**\n * A class implementing the `fetchDidFail` lifecycle callback. This makes it\n * easier to add failed requests to a background sync Queue.\n *\n * @memberof module:workbox-background-sync\n */\nclass BackgroundSyncPlugin {\n    /**\n     * @param {string} name See the [Queue]{@link module:workbox-background-sync.Queue}\n     *     documentation for parameter details.\n     * @param {Object} [options] See the\n     *     [Queue]{@link module:workbox-background-sync.Queue} documentation for\n     *     parameter details.\n     */\n    constructor(name, options) {\n        /**\n         * @param {Object} options\n         * @param {Request} options.request\n         * @private\n         */\n        this.fetchDidFail = async ({ request }) => {\n            await this._queue.pushRequest({ request });\n        };\n        this._queue = new Queue(name, options);\n    }\n}\nexport { BackgroundSyncPlugin };\n"],"names":["self","_","e","instanceOfAny","object","constructors","some","c","idbProxyableTypes","cursorAdvanceMethods","getIdbProxyableTypes","IDBDatabase","IDBObjectStore","IDBIndex","IDBCursor","IDBTransaction","getCursorAdvanceMethods","prototype","advance","continue","continuePrimaryKey","cursorRequestMap","WeakMap","transactionDoneMap","transactionStoreNamesMap","transformCache","reverseTransformCache","promisifyRequest","request","promise","Promise","resolve","reject","unlisten","removeEventListener","success","error","wrap","result","addEventListener","then","value","set","catch","cacheDonePromiseForTransaction","tx","has","done","complete","DOMException","idbProxyTraps","get","target","prop","receiver","objectStoreNames","undefined","objectStore","replaceTraps","callback","wrapFunction","func","transaction","storeNames","args","call","unwrap","sort","includes","apply","transformCachableValue","Proxy","IDBRequest","newValue","openDB","name","version","blocked","upgrade","blocking","terminated","indexedDB","open","openPromise","event","oldVersion","newVersion","db","readMethods","writeMethods","cachedMethods","Map","getMethod","targetFuncName","replace","useIndex","isWrite","method","storeName","store","index","shift","all","oldTraps","DB_VERSION","DB_NAME","REQUEST_OBJECT_STORE_NAME","QUEUE_NAME_INDEX","QueueDb","constructor","_db","addEntry","entry","getDb","durability","add","getFirstEntryId","cursor","openCursor","id","getAllEntriesByQueueName","queueName","results","getAllFromIndex","IDBKeyRange","only","Array","deleteEntry","delete","getFirstEntryByQueueName","getEndEntryFromIndex","getLastEntryByQueueName","query","direction","_upgradeDb","contains","deleteObjectStore","objStore","createObjectStore","autoIncrement","keyPath","createIndex","unique","QueueStore","_queueName","_queueDb","pushEntry","assert","isType","moduleName","className","funcName","paramName","requestData","unshiftEntry","firstId","popEntry","_removeEntry","shiftEntry","getAll","serializableProperties","StorableRequest","url","_requestData","fromRequest","headers","body","clone","arrayBuffer","key","entries","toObject","Object","assign","slice","toRequest","Request","TAG_PREFIX","MAX_RETENTION_TIME","queueNames","Set","convertEntry","queueStoreEntry","queueEntry","timestamp","metadata","Queue","onSync","maxRetentionTime","_syncInProgress","_requestsAddedDuringSync","WorkboxError","_name","_onSync","replayRequests","_maxRetentionTime","_queueStore","_addSyncListener","pushRequest","isInstance","_addRequest","unshiftRequest","popRequest","_removeRequest","shiftRequest","allEntries","now","Date","unexpiredEntries","maxRetentionTimeInMs","push","operation","storableRequest","logger","log","getFriendlyURL","registerSync","fetch","process","registration","sync","register","err","warn","tag","syncComplete","syncError","queue","Error","lastChance","waitUntil","_queueNames","BackgroundSyncPlugin","options","fetchDidFail","_queue"],"mappings":"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"}