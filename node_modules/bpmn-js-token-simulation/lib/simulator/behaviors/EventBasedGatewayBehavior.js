export default function EventBasedGatewayBehavior(simulator, activityBehavior, 
  elementRegistry, graphicsFactory) {
  this._simulator = simulator;  
  this._activityBehavior = activityBehavior;
  this._elementRegistry = elementRegistry;
  this._graphicsFactory = graphicsFactory;

  simulator.registerBehavior('bpmn:EventBasedGateway', this);
}

EventBasedGatewayBehavior.prototype.enter = function(context) {

  // literally do nothing, catch event behavior will unstuck us
  
  //we need to set the Color here due to that that we 'do nothing' here
  const {
    element,
  } = context;

  this.setColor(element);

};

EventBasedGatewayBehavior.prototype.setColor = function(element) {
  const businessObject = element.businessObject;

  businessObject.di.set('stroke', '#0e8d9e');
  businessObject.di.set('fill', '#c1dfec');

  const gfx = this._elementRegistry.getGraphics(element);

  const type = element.waypoints ? 'connection' : 'shape';

  this._graphicsFactory.update(type, element, gfx);
}

EventBasedGatewayBehavior.$inject = [
  'simulator',
  'activityBehavior',
  'elementRegistry',
  'graphicsFactory'
];