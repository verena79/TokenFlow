import {
    domify,
    classes as domClasses,
    event as domEvent
  } from 'min-dom';
  
  import {
    TOGGLE_MODE_EVENT,
    REPLAY_SIMULATION_EVENT,
    SCOPE_CREATE_EVENT
  } from '../../util/EventHelper';
  
  
  export default function ReplaySimulation(eventBus, tokenSimulationPalette, notifications) {
    this._eventBus = eventBus;
    this._tokenSimulationPalette = tokenSimulationPalette;
    this._notifications = notifications;
  
    this._init();
  
    eventBus.on(SCOPE_CREATE_EVENT, () => {
      domClasses(this._paletteEntry).remove('disabled');
    });
  
    eventBus.on(TOGGLE_MODE_EVENT, (event) => {
      const active = this._active = event.active;
  
      if (!active) {
        this.replaySimulation();
      }
    });
  }
  
  ReplaySimulation.prototype._init = function() {
    this._paletteEntry = domify(
        '<div class="entry disabled" title="Replay Simulation">' +
        '<i class="fa fa-repeat"></i>' +
        '</div>'
    );
  
    domEvent.bind(this._paletteEntry, 'click', () => {
        this.replaySimulation();
    
        this._notifications.showNotification({
          text: 'Replay Simulation',
          type: 'info'
        });
      });

    this._tokenSimulationPalette.addEntry(this._paletteEntry, 1);
  };
  
  ReplaySimulation.prototype.replaySimulation = function() {
    domClasses(this._paletteEntry).add('disabled');
  
    this._eventBus.fire(REPLAY_SIMULATION_EVENT);
  };
  
  ReplaySimulation.$inject = [
    'eventBus',
    'tokenSimulationPalette',
    'notifications',
    'canvas'
  ];